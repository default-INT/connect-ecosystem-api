import nx from '@nx/eslint-plugin';

export default [
  ...nx.configs['flat/base'],
  ...nx.configs['flat/typescript'],
  ...nx.configs['flat/javascript'],
  {
    ignores: ['**/dist'],
  },
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    rules: {
      '@nx/enforce-module-boundaries': [
        'error',
        {
          enforceBuildableLibDependency: true,
          allow: ['^.*/eslint(\\.base)?\\.config\\.[cm]?js$'],
          depConstraints: [
            {
              sourceTag: '*',
              onlyDependOnLibsWithTags: ['*'],
            },
          ],
        },
      ],
      'quotes': ['error', 'single', { avoidEscape: true }],
      'comma-dangle': ['error', 'always-multiline'],
      'object-curly-spacing': ['error', 'always'],
      'array-bracket-spacing': ['error', 'never'],
      'computed-property-spacing': ['error', 'never'],
      'key-spacing': ['error', { beforeColon: false, afterColon: true }],
      'space-infix-ops': 'error',
      'space-before-blocks': ['error', 'always'],
      'spaced-comment': ['error', 'always', { markers: ['/'] }],
      'no-trailing-spaces': 'error',
      'indent': ['error', 2, { SwitchCase: 1 }],
      'eqeqeq': ['error', 'always'],
      'no-unneeded-ternary': 'error',
      'yoda': ['error', 'never'],
      'no-else-return': ['error', { allowElseIf: false }],
      'no-mixed-operators': ['error', {
        groups: [
          ['&', '|', '^', '~', '<<', '>>', '>>>'],
          ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
          ['&&', '||'],
          ['in', 'instanceof'],
        ],
        allowSamePrecedence: false,
      }],
      'prefer-const': ['error', {
        destructuring: 'all',
      }],
      'no-var': 'error',
      'one-var': ['error', 'never'],
      'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 0 }],
      'lines-between-class-members': 'off',
      'no-unused-vars': 'off',
      'template-curly-spacing': ['error', 'never'],
      'space-unary-ops': ['error', { words: true, nonwords: false }],
      'block-spacing': ['error', 'always'],
      'no-tabs': 'error',
      'padding-line-between-statements': [
        'error',
        { blankLine: 'always', prev: ['multiline-const', 'multiline-let'], next: '*' },
        { blankLine: 'always', prev: '*', next: ['multiline-const', 'multiline-let'] },
        { blankLine: 'never', prev: ['singleline-let', 'singleline-const'], next: ['singleline-let', 'singleline-const'] },
        { blankLine: 'always', prev: '*', next: 'function' },
      ],
      'newline-before-return': 'error',
      'react/function-component-definition': 'off',
      curly: ['error', 'multi-line'],
      'object-curly-newline': ['error', { consistent: true }],
      'no-await-in-loop': 'off',
      'no-restricted-syntax': 'off',
      'no-nested-ternary': 'error',
      'max-len': ['error', { code: 100 }],
      'prefer-spread': 'off',
      'arrow-parens': ['error', 'as-needed'],
      'no-param-reassign': 'error',
      'no-underscore-dangle': 'off',
      'no-prototype-builtins': 'off',
      'prefer-destructuring': 'off',
      'no-restricted-exports': ['error', { restrictedNamedExports: ['off'] }],
      'arrow-body-style': ['error', 'as-needed'],
      'no-alert': 'off',
      'max-classes-per-file': ['error', 1],
      'class-methods-use-this': 'error',
      'no-plusplus': ['error', { allowForLoopAfterthoughts: true }],
      'no-multi-assign': 'error',
      'consistent-return': 'off',
      'func-names': 'off',
      'eol-last': ['error', 'always'],
    },
  },
  {
    files: [
      '**/*.ts',
      '**/*.tsx',
      '**/*.cts',
      '**/*.mts',
      '**/*.js',
      '**/*.jsx',
      '**/*.cjs',
      '**/*.mjs',
    ],
    // Override or add rules here
    rules: {},
  },
];
